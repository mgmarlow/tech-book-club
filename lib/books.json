[
  {
    "id": 1,
    "title": "Clean Agile: Back to Basics",
    "author": "Robert C. Martin",
    "state": "completed",
    "url": "https://learning.oreilly.com/library/view/clean-agile-back/9780135782002/",
    "summary": "",
    "img": "/books/martin_clean_agile.jpg"
  },
  {
    "id": 26,
    "title": "Designing Data-Intensive Applications",
    "author": "Martin Kleppmann",
    "state": "new",
    "url": "https://bookshop.org/books/designing-data-intensive-applications-the-big-ideas-behind-reliable-scalable-and-maintainable-systems/9781449373320",
    "summary": "In this practical and comprehensive guide, author Martin Kleppmann helps you navigate [the modern data] landscape by examining the pros and cons of various technologies for processing and storing data. Software keeps changing, but the fundamental principles remain the same.",
    "img": "/books/data_driven_apps.jpg"
  },
  {
    "id": 2,
    "title": "Functional-Light JS",
    "author": "Kyle Simpson",
    "state": "new",
    "url": "https://github.com/getify/functional-light-js",
    "summary": "This book is a balanced, pragmatic look at FP in JavaScript.",
    "img": "/books/simpson_functional_light.png"
  },
  {
    "id": 23,
    "title": "General Systemantics",
    "author": "John Gall",
    "state": "completed",
    "url": "https://www.amazon.com/Systems-Bible-Beginners-Guide-Large/dp/0961825170/",
    "summary": "A systems engineering treatise by John Gall in which he offers practical principles of systems design based on experience and anecdotes.",
    "img": "/books/gall_systemantics.jpg"
  },
  {
    "id": 24,
    "title": "Practical Object-Oriented Design: An Agile Primer Using Ruby",
    "author": "Sandi Metz",
    "state": "in_progress",
    "url": "https://bookshop.org//books/practical-object-oriented-design-an-agile-primer-using-ruby/9780134456478",
    "summary": "The Complete Guide to Writing Maintainable, Manageable, Pleasing, and Powerful Object-Oriented Applications.",
    "img": "/books/metz_practical_oop.jpg"
  },
  {
    "id": 3,
    "title": "Shape Up: Stop Running in Circles and Ship Work that Matters",
    "author": "Ryan Singer",
    "state": "completed",
    "url": "https://basecamp.com/shapeup",
    "summary": "Shape Up is for product development teams who struggle to ship.\n\nFull of eye-opening insights, Shape Up will help you break free of \"best practices\" that aren't working, think deeper about the right problems, and start shipping meaningful projects.",
    "img": "/books/singer_shape_up.svg"
  },
  {
    "id": 4,
    "title": "Clean Architecture",
    "author": "Carol Nichols",
    "state": "new",
    "url": "https://learning.oreilly.com/library/view/clean-architecture-a/9780134494272/",
    "summary": "",
    "img": "/books/nichols_clean_architecture.jpg"
  },
  {
    "id": 14,
    "title": "Domain-Driven Design: Tackling Complexity in the Heart of Software",
    "author": "Eric Evans",
    "state": "new",
    "url": "https://learning.oreilly.com/library/view/domain-driven-design-tackling/0321125215/",
    "summary": "The software development community widely acknowledges that domain modeling is central to software design. Through domain models, software developers are able to express rich functionality and translate it into a software implementation that truly serves the needs of its users. But despite its obvious importance, there are few practical resources that explain how to incorporate effective domain modeling into the software development process.\n\nDomain-Driven Design fills that need. This is not a book about specific technologies. It offers readers a systematic approach to domain-driven design, presenting an extensive set of design best practices, experience-based techniques, and fundamental principles that facilitate the development of software projects facing complex domains. Intertwining design and development practice, this book incorporates numerous examples based on actual projects to illustrate the application of domain-driven design to real-world software development.\n\nReaders learn how to use a domain model to make a complex development effort more focused and dynamic. A core of best practices and standard patterns provides a common language for the development team. A shift in emphasis—refactoring not just the code but the model underlying the code—in combination with the frequent iterations of Agile development leads to deeper insight into domains and enhanced communication between domain expert and programmer. Domain-Driven Design then builds on this foundation, and addresses modeling and design for complex systems and larger organizations.",
    "img": "/books/evans_ddd.jpg"
  },
  {
    "id": 25,
    "title": "Structure and Interpretation of Computer Programs",
    "author": "Abelson, Sussman, et al.",
    "state": "new",
    "url": "https://mitpress.mit.edu/sites/default/files/sicp/index.html",
    "summary": "Computing has changed enormously over [the last 25 years...] And yet the big ideas behind these changes remain the same, and they are well captured by SICP. —Brian Harvey",
    "img": "/books/sicp.jpg"
  }
]
